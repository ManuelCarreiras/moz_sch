version: '3.8'

services:
  postgres-db:
    container_name: postgres-db
    build:
      context: .
      dockerfile: ./Dockerfile.postgres
    ports:
      - 5432:5432
    volumes:
        - postgres-db:/var/lib/postgresql/data
    environment:
        - DOPPLER_TOKEN=${DOPPLER_TOKEN_TEMP}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
  api:
    image: api
    container_name: api
    build:
      context: ./api
      dockerfile: ./Dockerfile
    ports:  
      - 5000:5000
    restart: always
    environment: 
      - DOPPLER_TOKEN=${DOPPLER_TOKEN_TEMP}

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4048M

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host

  postgres-adminer:
    image: adminer
    container_name: db-postgres-adminer
    restart: always
    ports:
      - 8080:8080
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  db-timescale:
    image: db-timescale
    build:
      context: .
      dockerfile: ./Dockerfile.timescale
    container_name: db-timescale

    volumes:
        - db-timescale:/var/lib/postgresql/data
    ports:
        - 4321:5432
    environment:
        - DOPPLER_TOKEN=${DOPPLER_TOKEN_TEMP}
        - POSTGRES_USER=${TIMESCALE_USER}
        - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD}
        - POSTGRES_DB=${TIMESCALE_DB}
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6086M
volumes:
  postgres-db:
    driver: local
  db-timescale:
    driver: local